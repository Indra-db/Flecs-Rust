[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

[tasks.format]
install_crate = "rustfmt"
command = "cargo"
args = ["fmt"]
workspace = false

[tasks.clean]
command = "cargo"
args = ["clean", "-p", "flecs_ecs"]
workspace = false

[tasks.build]
command = "cargo"
args = ["build"]
workspace = false

[tasks.build-workspace]
description = "Build all workspace members (equivalent to `cargo build --workspace`)"
command = "cargo"
args = ["build", "--workspace"]
workspace = true

[tasks.test]
command = "cargo"
args = ["test", "-p", "flecs_ecs"]
workspace = false
 
[tasks.typos]
command = "typos"
workspace = false

[tasks.clippy]
command = "cargo"
args = ["clippy", "--all-targets"]
workspace = false

[tasks.flecs]
dependencies = [
    "format",
    "typos",
    "clippy",
    "build",
    "test"
]
workspace = false

[tasks.chmod]
script = [
    "chmod +x ${CARGO_MAKE_WORKING_DIRECTORY}/scripts"
]
workspace = false

[tasks.filter_fbench]
script = { file = "${CARGO_MAKE_WORKING_DIRECTORY}/scripts/filter_bench_log.sh", absolute_path = true }
dependencies = ["chmod"]
workspace = false

[tasks.fbench]
script = { file = "${CARGO_MAKE_WORKING_DIRECTORY}/scripts/fbench_log.sh", absolute_path = true }
dependencies = ["chmod"]
workspace = false

# When updating this, see if any docs.rs configs in `Cargo.toml` files need updating.
[tasks.fdocs]
condition = { channels = ["nightly"] }
env = { "RUSTDOCFLAGS" = "--cfg docsrs -Zunstable-options --generate-link-to-definition" }
command = "cargo"
args = ["doc", "-Zunstable-options", "-Zrustdoc-scrape-examples", "${@}"]
workspace = false

[tasks.asan-macos]
condition = { channels = ["nightly"] }
env = { CC = "/opt/homebrew/opt/llvm/bin/clang", CFLAGS = "-fsanitize=address", RUSTFLAGS = "-Zsanitizer=address -Clink-arg=-fuse-ld=/opt/homebrew/bin/ld64.lld" }
command = "cargo"
args = ["test", "-p", "flecs_ecs", "-Zbuild-std", "--target", "aarch64-apple-darwin", "--tests", "--", "--test-threads", "1"]
workspace = false

[tasks.fmt]
description = "Format the code in the flecs_ecs project using cargo fmt with nightly"
command = "rustup"
args = ["run", "nightly", "cargo", "fmt", "--", "--config", "format_code_in_doc_comments=true"]
workspace = false

[tasks.test-book]
description = "Test the flecs rust book"
command = "mdbook"
args = ["test", "flecs_ecs/doc/flecs", "--library-path", "target/debug/deps"]
workspace = false

[tasks.install-mdbook]
install_crate = { crate_name = "mdbook", binary = "mdbook", test_arg = "--version" }

[tasks.install-mdbook-admonish]
install_crate = { crate_name = "mdbook-admonish", binary = "mdbook-admonish", test_arg = "--version" }

[tasks.install-book-deps]
dependencies = [
    "install-mdbook",
    "install-mdbook-admonish"
]

[tasks.build-book]
dependencies = ["install-book-deps"]
cwd = "./flecs_ecs/doc/flecs"
command = "mdbook"
args = ["build"]

[tasks.serve-book]
dependencies = ["install-book-deps"]
cwd = "./flecs_ecs/doc/flecs"
command = "mdbook"
args = ["serve", "--open"]

[tasks.build-tests-with-regeneration]
description = "Build all build test projects with binding regeneration enabled"
script = { file = "${CARGO_MAKE_WORKING_DIRECTORY}/scripts/build_tests_with_regeneration.sh", absolute_path = true }
dependencies = ["chmod"]
workspace = false

[tasks.hack-each-feature]
description = "Run `cargo hack check` for `flecs_ecs` across each feature with specified excludes and features"
command = "cargo"
args = [
    "hack",
    "check",
    "-p",
    "flecs_ecs",
    "--each-feature",
    "--exclude-features",
    "flecs_force_build_debug_c,flecs_force_build_release_c,flecs_default_to_uncached_queries,flecs_force_enable_ecs_asserts,flecs_disable_build_c",
    "--no-dev-deps",
    "-v",
    "--features",
    "std,flecs_regenerate_binding_c"
]
workspace = false