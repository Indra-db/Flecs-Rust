[package]
name = "flecs_ecs"
version = "0.0.2"
edition.workspace = true
license.workspace = true
repository.workspace = true
authors = ["Indra de Backere <debackere.indra@gmail.com>"]
description = "Rust API for the C/CPP flecs ECS library <https://github.com/SanderMertens/flecs>"
keywords = ["ecs", "flecs", "entity-component-system", "game-development", "gamedev", "simulation", "performance", "game-engine"]
categories = ["game-development", "api-bindings", "simulation", "development-tools::game-engines", "data-structures"]

[lints]
workspace = true

[dependencies]
flecs_ecs_derive = { path = "../flecs_ecs_derive" }
flecs_ecs_sys = { path = "../flecs_ecs_sys" }

[dev-dependencies]
criterion = "0.5.1"
seq-macro = "0.3.5"
rand = "0.8.5"
ctor = "0.2.7"
insta = { version = "1.38.0", features = ["yaml","filters"] }

[features]

######################
# sys feature flags
######################

# Regenerate the C binding for flecs C
flecs_regenerate_binding_c = ["flecs_ecs_sys/regenerate_binding"]

# force build debug for flecs C, even in release mode
flecs_force_build_debug_c = ["flecs_ecs_sys/force_build_debug"]

# force build release for C flecs, even in debug mode
flecs_force_build_release_c = ["flecs_ecs_sys/force_build_release"]

# force enables both rust and c ecs asserts, useful when running release mode, but wanting the asserts for safety
flecs_force_enable_ecs_asserts = ["flecs_ecs_sys/flecs_force_enable_ecs_asserts"]

# tell C flecs to use the OS allocator instead of its own
flecs_use_os_alloc = ["flecs_ecs_sys/use_os_alloc"]

# Enabling this will not build a copy of flecs into this library.
# Instead, the executable that this is linked with will need to
# provide the symbols required. This is useful when using both
# Rust and C++ code in an application and a copy of flecs is
# already being linked into the executable via other means.
flecs_disable_build_c = ["flecs_ecs_sys/disable_build_c"]

######################
# Flecs feature flags
######################

# indicate that the flecs library is meant to be used in a multi-world application
# this will disable some optimizations.
# In Flecs C++ it's necessary for components to be registered manually before being used in multithreaded systems
# this is not necessary in Rust and is considered multithreaded safe for single world applications.
# If you intend to have multiple worlds, you should enable this feature and register components manually
# if the intent is to share components between worlds, like in C++. In the future this limitation might be mitigated.
flecs_multi_world_application = []

# Module support
flecs_module = ["flecs_ecs_sys/flecs_module"]

# ECS data definition format
flecs_script = ["flecs_ecs_sys/flecs_script", "flecs_meta", "flecs_doc", "flecs_module"]

# Constraint solver for advanced queries
flecs_rules = ["flecs_ecs_sys/flecs_rules"]

# Snapshot & restore ECS data
flecs_snapshot = ["flecs_ecs_sys/flecs_snapshot"]

# Access runtime statistics
flecs_stats = ["flecs_ecs_sys/flecs_stats"]

# Track runtime statistics periodically
flecs_monitor = ["flecs_ecs_sys/flecs_monitor","flecs_stats", "flecs_system", "flecs_timer", "flecs_module"]

# Expose component data as statistics
flecs_metrics = ["flecs_ecs_sys/flecs_metrics", "flecs_meta", "flecs_units", "flecs_pipeline"]

# Monitor conditions for errors
flecs_alerts = ["flecs_ecs_sys/flecs_alerts", "flecs_rules", "flecs_pipeline"]

# System support
flecs_system = ["flecs_ecs_sys/flecs_system", "flecs_module"]

# Pipeline support
flecs_pipeline = ["flecs_ecs_sys/flecs_pipeline", "flecs_module", "flecs_system"]

# Timer support
flecs_timer = ["flecs_ecs_sys/flecs_timer", "flecs_module", "flecs_pipeline"]

# Reflection support
flecs_meta = ["flecs_ecs_sys/flecs_meta", "flecs_module"]

# Builtin standard units
flecs_units = ["flecs_ecs_sys/flecs_units", "flecs_module", "flecs_meta"]

# Parsing JSON to/from component values
flecs_json = ["flecs_ecs_sys/flecs_json", "flecs_meta"]

# Document entities & components
flecs_doc = ["flecs_ecs_sys/flecs_doc", "flecs_module"]

# When enabled ECS provides more detailed logs
flecs_log = ["flecs_ecs_sys/flecs_log"]

# Application addon
flecs_app = ["flecs_ecs_sys/flecs_app", "flecs_pipeline"]

# Default implementation for OS API
flecs_os_api_impl = ["flecs_ecs_sys/flecs_os_api_impl"]

# Tiny HTTP server for connecting to remote UI
flecs_http = ["flecs_ecs_sys/flecs_http"]

# REST API for querying application data
flecs_rest = ["flecs_ecs_sys/flecs_rest", "flecs_http", "flecs_json", "flecs_rules", "flecs_pipeline"]

# Journaling addon (disabled by default)
flecs_journal = ["flecs_ecs_sys/flecs_journal","flecs_log"]

default = [
    "flecs_regenerate_binding_c",
    "flecs_module",
    "flecs_script",
    "flecs_rules",
    "flecs_snapshot",
    "flecs_stats",
    "flecs_monitor",
    "flecs_metrics",
    "flecs_alerts",
    "flecs_system",
    "flecs_pipeline",
    "flecs_timer",
    "flecs_meta",
    "flecs_units",
    "flecs_json",
    "flecs_doc",
    "flecs_log",
    "flecs_app",
    "flecs_os_api_impl",
    "flecs_http",
    "flecs_rest",
]

[target.'cfg(any())'.dependencies]
flecs_ecs_derive = { version = "=0.1.0", path = "../flecs_ecs_derive" }
flecs_ecs_sys = { version = "=0.1.0", path = "../flecs_ecs_sys" }


######################
# Benchmarks
######################

[[bench]]
name = "mod"
harness = false

######################
# Examples
######################
# These examples are only the examples that rely on a certain feature to compile successfully.

# [[example]]
# name = "system_ctx"
# path = "examples/flecs/system_ctx.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_custom_phases_no_builtin"
# path = "examples/flecs/system_custom_phases_no_builtin.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_custom_phases"
# path = "examples/flecs/system_custom_phases.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_custom_runner"
# path = "examples/flecs/system_custom_runner.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_custom_pipeline"
# path = "examples/flecs/system_custom_pipeline.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_delta_time"
# path = "examples/flecs/system_delta_time.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_mutate_entity_handle"
# path = "examples/flecs/system_mutate_entity_handle.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_mutate_entity"
# path = "examples/flecs/system_mutate_entity.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_no_readonly"
# path = "examples/flecs/system_no_readonly.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_pipeline"
# path = "examples/flecs/system_pipeline.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_startup_system"
# path = "examples/flecs/system_startup_system.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_sync_point_delete"
# path = "examples/flecs/system_sync_point_delete.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_sync_point"
# path = "examples/flecs/system_sync_point.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_target_fps"
# path = "examples/flecs/system_target_fps.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_time_interval"
# path = "examples/flecs/system_time_interval.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "a_hello_world"
# path = "examples/flecs/a_hello_world.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "system_basics"
# path = "examples/flecs/system_basics.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "query_sorting"
# path = "examples/flecs/query_sorting.rs"
# required-features = ["flecs_system"]

# [[example]]
# name = "rules_basics"
# path = "examples/flecs/rules_basics.rs"
# required-features = ["flecs_rules"]

# [[example]]
# name = "rules_component_inheritance"
# path = "examples/flecs/rules_component_inheritance.rs"
# required-features = ["flecs_rules"]

# [[example]]
# name = "rules_cyclic_variables"
# path = "examples/flecs/rules_cyclic_variables.rs"
# required-features = ["flecs_rules"]

# [[example]]
# name = "rules_facts"
# path = "examples/flecs/rules_facts.rs"
# required-features = ["flecs_rules"]

# [[example]]
# name = "rules_setting_variables"
# path = "examples/flecs/rules_setting_variables.rs"
# required-features = ["flecs_rules"]

# [[example]]
# name = "rules_transitive_queries"
# path = "examples/flecs/rules_transitive_queries.rs"
# required-features = ["flecs_rules"]

[[example]]
name = "examples"
path = "examples/flecs/z_main_test.rs"
test = true
